// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package internal

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlayerInfoCache struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerInfoCache(buf []byte, offset flatbuffers.UOffsetT) *PlayerInfoCache {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerInfoCache{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerInfoCacheBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerInfoCache(buf []byte, offset flatbuffers.UOffsetT) *PlayerInfoCache {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerInfoCache{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerInfoCacheBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerInfoCache) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerInfoCache) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerInfoCache) AgentId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerInfoCache) MutateAgentId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *PlayerInfoCache) PackageId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerInfoCache) MutatePackageId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *PlayerInfoCache) PlayerId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerInfoCache) MutatePlayerId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *PlayerInfoCache) ChannelId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PlayerInfoCache) RealName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PlayerInfoCache) LoginDeviceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PlayerInfoCacheStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PlayerInfoCacheAddAgentId(builder *flatbuffers.Builder, agentId int64) {
	builder.PrependInt64Slot(0, agentId, 0)
}
func PlayerInfoCacheAddPackageId(builder *flatbuffers.Builder, packageId int64) {
	builder.PrependInt64Slot(1, packageId, 0)
}
func PlayerInfoCacheAddPlayerId(builder *flatbuffers.Builder, playerId int64) {
	builder.PrependInt64Slot(2, playerId, 0)
}
func PlayerInfoCacheAddChannelId(builder *flatbuffers.Builder, channelId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(channelId), 0)
}
func PlayerInfoCacheAddRealName(builder *flatbuffers.Builder, realName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(realName), 0)
}
func PlayerInfoCacheAddLoginDeviceId(builder *flatbuffers.Builder, loginDeviceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(loginDeviceId), 0)
}
func PlayerInfoCacheEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
